#!/usr/bin/env ruby
# encoding: utf-8

require "rubygems"
require "pivotal-tracker"
require "rainbow"
require "action_view"
require "launchy"
require "pp"
require_relative "app_config"
include ActionView::Helpers::DateHelper

# ----------------------------------------------------------
# Load config

config = nil
begin
  config = AppConfig.load
rescue Exception => e
  puts e
  exit 1
end

# ----------------------------------------------------------
# Init

PivotalTracker::Client.token = config.api_key
project = PivotalTracker::Project.find config.project

# ----------------------------------------------------------
# Main app code

require "commander/import"
require "pivotal-tracker"

program :version, "1.0"
program :description, "Pivotal Tracker command line client."

command :mine do |c|
  c.syntax = "pivotal-slacker mine [options]"
  c.summary = ""
  c.description = "List your stories in pivotal tracker."
  c.example "description", "command example"
  c.option "--some-switch", "Some switch that does something"
  c.action do |args, options|
    # Do something or c.when_called Pivotal-slacker::Commands::Mine
    
    states = %w{unstarted started finished accepted rejected}
    owned_by = config.user
    
    puts "Looking for stories owned by #{owned_by} in states: #{states}".color("#444444")

    stories = project.stories.all(:owned_by => owned_by, :current_state => states)
    stories.sort! { |a, b| a.created_at <=> b.created_at }
    stories.each do |story|
      id = story.id.to_s.color("#404040")
      name = story.name # color("#4C9900").underline # (:green)
      
      state = story.current_state
      
      if state == "finished"
        # state = state.color('009900').bright #background('009900').color('ffffff')
        state = " ✓ #{state} ".background('#4C9900').bright.underline
      elsif state == "accepted"
        state = " ✓ #{state} ".background('#0080ff').color(:black).underline
      else
        state = state.bright # .background(:green).underline
      end
      
      requested_by = story.requested_by.color("#3399ff")
      
      created_at = distance_of_time_in_words(Time.now, story.created_at)
      
      puts "[#{id}] #{name}  ~  #{state}, from #{requested_by}, created #{created_at} ago"
    end
  end
end

command :open do |c|
  c.syntax = "pivotal-slacker open story_id"
  c.description = "Open a specific Pivotal Tracker story in the browser."
  c.example "Open a story with ID 123", "pivotal-slacker open 123"
  c.action do |args, options|
    story = project.stories.find(args[0].to_i)
    Launchy.open story.url
  end
end

command :create do |c|
  c.syntax = "pivotal-slacker create [options]"
  c.summary = ""
  c.description = ""
  c.example "description", "command example"
  c.option "--some-switch", "Some switch that does something"
  c.action do |args, options|
    # Do something or c.when_called Pivotal-slacker::Commands::Create
  end
end

