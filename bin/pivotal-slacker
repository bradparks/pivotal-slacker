#!/usr/bin/env ruby
# encoding: utf-8

require "rubygems"
require "pivotal-tracker"
require "rainbow"
require "action_view"
require "launchy"
require "pp"
require "app_config"
require "formatter"
include ActionView::Helpers::DateHelper

# ----------------------------------------------------------
# Load config

config = nil
begin
  config = AppConfig.load
rescue Exception => e
  puts e
  exit 1
end

# ----------------------------------------------------------
# Init

PivotalTracker::Client.token = config.api_key
project = PivotalTracker::Project.find config.project

# ----------------------------------------------------------
# Main app code

require "commander/import"
require "pivotal-tracker"

program :version, "1.5.0"
program :description, "Pivotal Tracker command line client."

# ----------------------------------------------------------
# Support functionality

def output_story_list opts={:project => nil, :states => [], :owned_by => nil}
  puts "Looking for stories owned by #{opts[:owned_by]} in states: #{opts[:states]}".color("#444444")

  stories = opts[:project].stories.all(:owned_by => opts[:owned_by], :current_state => opts[:states])
  stories.sort! { |a, b| a.created_at <=> b.created_at }
  stories.each do |story|
    id = Formatter.story_id(story.id)
    name = Formatter.story_name(story.name)
    state = Formatter.state(story.current_state)
    requested_by = Formatter.requested_by(story.requested_by)
    created_at = Formatter.time_ago(story.created_at)
    story_type = Formatter.story_type(story.story_type)

    puts "[#{id}] #{name}  ~  #{state} #{story_type}, from #{requested_by}, created #{created_at}"
  end
end

# ----------------------------------------------------------
# Command-line interaction functionality

command :mine do |c|
  c.syntax = "pivotal-slacker mine"
  c.description = "List your stories in Pivotal Tracker."
  c.example "List your open stories", "pivotal-slacker mine"
  c.action do |args, options|
    states = %w{unstarted started finished rejected}
    owned_by = config.user
    
    output_story_list :project => project, :states => states, :owned_by => owned_by
  end
end

command :accepted do |c|
  c.syntax = "pivotal-slacker accepted"
  c.description = "List your accepted stories in Pivotal Tracker."
  c.example "List your accepted stories", "pivotal-slacker accepted"
  c.action do |args, options|
    states = %w{accepted}
    owned_by = config.user
    
    output_story_list :project => project, :states => states, :owned_by => owned_by
  end
end

command :started do |c|
  c.syntax = "pivotal-slacker started"
  c.description = "List your started stories in Pivotal Tracker."
  c.example "List your started stories", "pivotal-slacker started"
  c.action do |args, options|
    states = %w{started}
    owned_by = config.user
    
    output_story_list :project => project, :states => states, :owned_by => owned_by
  end
end

command :unstarted do |c|
  c.syntax = "pivotal-slacker unstarted"
  c.description = "List your unstarted stories in Pivotal Tracker."
  c.example "List your unstarted stories", "pivotal-slacker unstarted"
  c.action do |args, options|
    states = %w{unstarted}
    owned_by = config.user
    
    output_story_list :project => project, :states => states, :owned_by => owned_by
  end
end

command :open do |c|
  c.syntax = "pivotal-slacker open story_id"
  c.description = "Open a specific Pivotal Tracker story in the browser."
  c.example "Open a story with ID 123", "pivotal-slacker open 123"
  c.action do |args, options|
    story = project.stories.find(args[0].to_i)
    Launchy.open story.url
  end
end

command :show do |c|
  c.syntax = "pivotal-slacker show story_id"  
  c.description = "Show the details of a given Pivotal Tracker story."
  c.example "Show a story with ID 123", "pivotal-slacker show 123"
  c.action do |args, options|
    story = project.stories.find(args[0].to_i)
    id = Formatter.story_id(story.id)
    state = Formatter.state(story.current_state)
    requested_by = Formatter.requested_by(story.requested_by)
    created_at = Formatter.time_ago(story.created_at)

    puts ""
    puts "[#{id}] #{Formatter.story_name(story.name, :heading => true)}"
    puts "#{state}, from #{requested_by}, created #{created_at}"
    puts "â˜›  #{story.url.color('#0066CC').underline}"
    puts ""
    puts Formatter.description(story.description)
    puts ""
    
    notes = story.notes.all.sort { |a, b| a.noted_at <=> b.noted_at }
    notes.each do |note|
      author = Formatter.note_author(note.author)
      noted_at = Formatter.time_ago(note.noted_at)
      note_text = Formatter.note_text(note.text)
      puts "#{author} (#{noted_at}): #{note_text}"
    end
    
    # Extra padding line after notes.
    if notes != nil and notes.size > 0
      puts ""
    end
    
  end
end

command :start do |c|
  c.syntax = "pivotal-slacker start story_id"
  c.description = "Mark a given Pivotal Tracker story as \"started\"."
  c.example "Start a story with ID 123", "pivotal-slacker start 123"
  c.action do |args, options|
    story_id = args[0].to_i
    
    story = project.stories.find(story_id)
    story.update :current_state => "started"
    
    puts Formatter.story_action(Formatter.state("started"), story_id, story.name) + "."
  end
end

command :comment do |c|
  c.syntax = "pivotal-slacker comment story_id comment"
  c.description = "Comment on a given Pivotal Tracker story."
  c.example "Comment on story 123", "pivotal-slacker comment 123 \"Due to my skills I will destroy this task.\""
  c.action do |args, options|
    story_id = args[0].to_i
    comment = args[1]
    
    story = project.stories.find(story_id)
    story.notes.create :text => comment
    
    comment = Formatter.note_text(comment)
    puts "#{Formatter.story_action "Commented on", story_id, story.name}:"
    puts "#{Formatter.note_author(config.user)}: #{comment}"
  end
end

command :finish do |c|
  c.syntax = "pivotal-slacker finish story_id"
  c.description = "Mark a given Pivotal Tracker story as \"finished\"."
  c.example "Finish a story with ID 123", "pivotal-slacker finish 123"
  c.action do |args, options|
    story_id = args[0].to_i
    
    story = project.stories.find(story_id)
    story.update :current_state => "finished"
    
    puts Formatter.story_action(Formatter.state("finished"), story_id, story.name) + "."
  end
end

command :create do |c|
  c.syntax = "pivotal-slacker create [options]"
  c.description = "Create a new task in Pivotal Tracker."
  c.example "Create a new task", "pivotal-slacker create --chore --owner \"Jimmy Winkerbean\""
  c.option "--feature", "Designate the story as a feature"
  c.option "--bug", "Designate the story as a bug"
  c.option "--chore", "Designate the story as a chore"
  c.option "--release", "Designate the story as a release"
  c.option "--owner STRING", String, "Assigns the story to a user"
  c.option "--name STRING", String, "Name of story"
  c.option "--description STRING", String, "Description of story"
  c.action do |args, options|
    options.default :chore => false, :owner => config.user, :name => nil, :description => nil
    
    raise "--name is required" if options.name == nil
    raise "--description is required" if options.description == nil

    story_type = "feature" if options.feature
    story_type = "bug" if options.bug
    story_type = "chore" if options.chore
    story_type = "release" if options.release

    puts ""
    puts Formatter.story_name(options.name, :heading => true)
    puts "#{Formatter.attr_descriptor('type is', Formatter.story_type(story_type))}"
    puts "#{Formatter.attr_descriptor('requested by', Formatter.owner(config.user))}"
    puts "#{Formatter.attr_descriptor('owned by', Formatter.owner(options.owner))}"
    puts "#{Formatter.attr_descriptor('description is', Formatter.description(options.description))}"
    puts ""
    
    if agree "Really create? (y/n)"
      story = project.stories.create(
        :name => options.name,
        :story_type => story_type,
        :description => options.description,
        :requested_by => config.user,
        :owned_by => options.owner
      )
      puts Formatter.story_action("Created", story.id, story.name)
    else
      puts "Didn't create story."
    end
  end
end

